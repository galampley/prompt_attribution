To accomplish this task, we will use Python libraries such as `pandas` for data manipulation, `matplotlib` and `seaborn` for visualization, and `numpy` for numerical operations. Below is a step-by-step guide with code snippets to achieve each of the requested metrics.

First, ensure you have the necessary libraries installed:

```bash
pip install pandas matplotlib seaborn numpy
```

Now, let's write the Python code:

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Load the CSV file into a DataFrame
df = pd.read_csv('ecommerce_transactions.csv')

# Ensure the date column is in datetime format
df['order_date'] = pd.to_datetime(df['order_date'])

# 1. Total revenue per month (bar chart)
df['month'] = df['order_date'].dt.to_period('M')
monthly_revenue = df.groupby('month')['revenue'].sum()

plt.figure(figsize=(10, 6))
monthly_revenue.plot(kind='bar', color='skyblue')
plt.title('Total Revenue per Month')
plt.xlabel('Month')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 2. Customer retention rate by cohort (heatmap)
df['order_month'] = df['order_date'].dt.to_period('M')
df['cohort'] = df.groupby('customer_id')['order_date'].transform('min').dt.to_period('M')

cohort_data = df.groupby(['cohort', 'order_month']).agg(n_customers=('customer_id', 'nunique')).reset_index()
cohort_pivot = cohort_data.pivot_table(index='cohort', columns='order_month', values='n_customers')

cohort_size = cohort_pivot.iloc[:, 0]
retention_matrix = cohort_pivot.divide(cohort_size, axis=0)

plt.figure(figsize=(12, 8))
sns.heatmap(retention_matrix, annot=True, fmt=".0%", cmap="YlGnBu")
plt.title('Customer Retention Rate by Cohort')
plt.xlabel('Order Month')
plt.ylabel('Cohort Month')
plt.show()

# 3. Average order value trend over time (line chart)
df['order_value'] = df['revenue'] / df['quantity']
average_order_value = df.groupby('month')['order_value'].mean()

plt.figure(figsize=(10, 6))
average_order_value.plot(kind='line', marker='o', color='purple')
plt.title('Average Order Value Trend Over Time')
plt.xlabel('Month')
plt.ylabel('Average Order Value')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 4. Top 10 products by revenue
product_revenue = df.groupby('product_id')['revenue'].sum().sort_values(ascending=False).head(10)

plt.figure(figsize=(10, 6))
product_revenue.plot(kind='bar', color='orange')
plt.title('Top 10 Products by Revenue')
plt.xlabel('Product ID')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 5. Identification of customers at risk of churn
# Assuming customers who haven't purchased in the last 3 months are at risk
last_order_date = df.groupby('customer_id')['order_date'].max()
cutoff_date = df['order_date'].max() - pd.DateOffset(months=3)
at_risk_customers = last_order_date[last_order_date < cutoff_date].index

print("Customers at risk of churn:")
print(at_risk_customers)
```

### Explanation:

1. **Total Revenue per Month**: We group the data by month and sum the revenue, then plot it as a bar chart.

2. **Customer Retention Rate by Cohort**: We create cohorts based on the first purchase month and calculate the retention rate for each cohort over time, visualized as a heatmap.

3. **Average Order Value Trend**: We calculate the average order value per month and plot it as a line chart.

4. **Top 10 Products by Revenue**: We sum the revenue for each product and sort to find the top 10, then plot as a bar chart.

5. **Identification of Customers at Risk of Churn**: We identify customers who haven't made a purchase in the last 3 months as at risk of churn.

Make sure to adjust the column names in the code to match those in your CSV file.