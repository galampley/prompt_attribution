[
  {
    "id": "P-01",
    "style": "highly_skilled_professional",
    "text": "You are an experienced financial analyst with expertise in the technology sector. Given the following 10-K snippet from a major cloud computing provider, produce a comprehensive bullet-point risk summary (max 120 words) and label each identified risk with a High/Medium/Low impact rating. Focus primarily on competitive threats, regulatory challenges, and supply chain vulnerabilities. After the bullet points, provide 2-3 sentences explaining which risk you believe investors are currently underestimating the most."
  },
  {
    "id": "P-02",
    "style": "structured_technical",
    "text": "# Data Analysis Task\n\n# Write Python 3 code that reads a CSV of e-commerce transactions and outputs the following metrics:\n\n1. Total revenue per month (bar chart)\n2. Customer retention rate by cohort (heatmap)\n3. Average order value trend over time (line chart)\n4. Top 10 products by revenue\n5. Identification of customers at risk of churn\n\n# Assumptions:\n- CSV has columns: transaction_id, customer_id, date, product_id, quantity, price, country\n- Use pandas and matplotlib/seaborn\n- Include docstrings and comments\n- Handle missing values appropriately\n- Optimize for performance with large datasets\n\nThe code should be production-ready and follow PEP 8 style guidelines."
  },
  {
    "id": "P-03",
    "style": "concise_constraint",
    "text": "Summarize this 2-page news article about renewable energy investments in developing economies in exactly three tweet-sized sentences. Ensure each sentence contains at least one relevant statistic."
  },
  {
    "id": "P-04",
    "style": "complex_detailed_instruction",
    "text": "# Comprehensive Business Analysis: Global Electric Vehicle Market 2023-2030\n\n## BACKGROUND\nYou are a senior consultant at a prestigious management consulting firm specializing in automotive industry transformations. Your client is a traditional ICE (Internal Combustion Engine) automobile manufacturer that is planning to allocate $15 billion to transition toward electric vehicle (EV) production over the next 7 years. The board of directors requires a comprehensive analysis before their final investment decision meeting next month.\n\n## TASK OVERVIEW\nPrepare a detailed analysis of the global electric vehicle market covering the following sections in depth. Your analysis should be data-driven, insightful, and actionable, providing strategic guidance for a company that is late to the EV transformation but has significant manufacturing capabilities and brand recognition.\n\n## REQUIRED SECTIONS\n\n### 1. Market Size & Growth Projections\n- Current global EV market size by region (North America, Europe, China, Rest of Asia, Others)\n- Growth forecast 2023-2030 with CAGR\n- Market size by vehicle segment (compact, sedan, SUV, luxury, commercial)\n- Analysis of BEV vs. PHEV adoption trends\n\n### 2. Competitive Landscape\n- Detailed market share analysis of top 10 EV manufacturers\n- Competitive advantage assessment of key players\n- Threat analysis from new entrants (especially tech companies)\n- Comparative analysis of different business models (Tesla's vertical integration vs. traditional OEM approaches)\n\n### 3. Technology Outlook\n- Battery technology evolution and cost curve projections\n- Charging infrastructure development by region\n- Autonomous driving capabilities as a differentiator\n- Software and connected services revenue potential\n\n### 4. Regulatory Environment\n- Impact of government incentives by major market\n- Emissions regulations timeline by region\n- Carbon credit systems and their financial implications\n- Trade policies affecting supply chains\n\n### 5. Supply Chain Analysis\n- Critical raw material sourcing (lithium, cobalt, nickel, etc.)\n- Battery production capacity and constraints\n- Semiconductor supply challenges\n- Risk assessment of geographical concentration\n\n### 6. Consumer Trends\n- Adoption barriers and their evolution\n- Consumer preference shifts by demographic\n- Willingness to pay for EV-specific features\n- Brand loyalty differences between ICE and EV markets\n\n### 7. Strategic Entry Options\n- Build vs. partner vs. acquire analysis\n- Optimal vehicle segments for entry\n- Regional prioritization strategy\n- ICE phase-out timeline recommendations\n\n### 8. Financial Projections\n- Capital expenditure requirements by scenario\n- Profitability timeline projections\n- R&D allocation recommendations\n- Risk-adjusted ROI analysis\n\n## FORMAT REQUIREMENTS\n- Begin with an executive summary (max 250 words)\n- Use data visualizations where appropriate (describe them textually)\n- Include risk assessment for each strategic recommendation\n- Provide specific, actionable next steps prioritized by urgency and impact\n- End with key metrics the board should track quarterly to gauge success\n\n## STYLE GUIDANCE\n- Maintain a professional, data-driven tone\n- Acknowledge uncertainties transparently\n- Avoid technical jargon unless defining it\n- Support all assertions with reasoning or data references\n- Differentiate clearly between facts, consensus views, and your firm's unique perspectives\n\nThe board members have varying levels of technical knowledge about EVs, so ensure fundamental concepts are explained briefly but not condescendingly."
  },
  {
    "id": "P-05",
    "style": "average_open",
    "text": "I need marketing copy for a new eco-friendly water bottle. The bottle is made from recycled ocean plastic and has a unique filtration system."
  },
  {
    "id": "P-07",
    "style": "extremely_verbose_documentation",
    "text": "# Technical Documentation for ProcGenX Framework Integration\n\n## Introduction and Overview\n\nThis document provides comprehensive technical guidelines for integrating the ProcGenX v3.2.7 procedural generation framework into existing game development workflows, specifically targeting mid-to-large scale projects utilizing either Unreal Engine 5.1+ or Unity 2022.2+. The integration process described herein has been validated across Windows, macOS, and Linux development environments, with appropriate platform-specific considerations noted where applicable throughout the documentation.\n\nProcGenX represents a paradigm shift in procedural content generation, employing a hybrid approach that combines traditional PCG algorithms with machine learning components to create dynamic, responsive, and contextually-aware environmental assets. This document assumes the reader possesses intermediate to advanced knowledge of game engine architecture, C++/C# programming (engine-dependent), shader development, and basic machine learning concepts. Additional prerequisites include familiarity with version control systems (preferably Git), package management, and build pipeline orchestration.\n\n## Section 1: System Requirements and Prerequisites\n\n### 1.1 Hardware Requirements\n\nThe following specifications represent the minimum recommended hardware configuration for development workstations implementing ProcGenX:\n\n- CPU: 8+ core processor, 3.5GHz+ (AMD Ryzen 7 series or Intel i7 10th generation or newer)\n- RAM: 32GB DDR4-3200 or faster\n- GPU: NVIDIA RTX 2070 or AMD equivalent with minimum 8GB VRAM\n- Storage: NVMe SSD with at least 100GB available space for framework, dependencies, and generated assets\n- Network: Broadband internet connection (50+ Mbps) for initial framework download and updates\n\n### 1.2 Software Prerequisites\n\n#### 1.2.1 Development Environment\n\n- Microsoft Visual Studio 2019/2022 (Windows) or Xcode 13+ (macOS)\n- CMake 3.20+\n- Python 3.9+ with the following packages:\n  - NumPy 1.20+\n  - TensorFlow 2.8+ or PyTorch 1.11+\n  - Scikit-learn 1.0+\n  - Matplotlib 3.5+\n  - Pillow 9.0+\n\n#### 1.2.2 Engine-Specific Requirements\n\n*For Unreal Engine:*\n- Unreal Engine 5.1 or newer\n- Visual Studio 2019/2022 with Desktop development with C++ workload\n- Windows 10/11 SDK 10.0.19041.0 or newer\n- .NET Framework 4.8 Developer Pack\n\n*For Unity:*\n- Unity 2022.2 or newer\n- Burst Compiler package 1.7+\n- Mathematics package 1.2+\n- High Definition Render Pipeline or Universal Render Pipeline\n- C# coding environment (Visual Studio, VS Code with C# extensions, or JetBrains Rider)\n\n### 1.3 Dependency List\n\nThe following third-party libraries are required for full functionality:\n\n1. **Eigen 3.4.0** - Linear algebra operations\n2. **OpenVDB 9.0.0** - Volumetric data handling\n3. **libnoise 1.0.0** - Coherent noise generation\n4. **zlib 1.2.11** - Compression algorithms\n5. **cereal 1.3.0** - Serialization framework\n6. **Intel TBB 2021.5.0** - Parallelization primitives\n7. **OpenImageDenoise 1.4.0** - AI-accelerated denoising\n8. **JsonCpp 1.9.4** - JSON processing\n9. **CUDA Toolkit 11.6+** (NVIDIA GPUs only) - GPU acceleration\n10. **DirectML** (AMD GPUs on Windows) - GPU acceleration\n\nAll dependencies will be automatically downloaded and built by the provided setup script, but can be manually configured as described in Appendix A for air-gapped development environments.\n\n## Section 2: Installation Process\n\n### 2.1 Framework Acquisition\n\nThe ProcGenX framework can be acquired through one of three methods:\n\n1. **Package Manager** (Recommended):\n   - For Unity: Import through the Package Manager using Git URL: `https://github.com/procgenx/unity-integration.git#v3.2.7`\n   - For Unreal: Add as a plugin via the Epic Games Marketplace or GitHub URL in the .uplugin file\n\n2. **Manual Download**:\n   - Clone the repository: `git clone --recurse-submodules https://github.com/procgenx/framework.git`\n   - Checkout the appropriate version: `git checkout tags/v3.2.7`\n\n3. **Binary Distribution**:\n   - Download the pre-compiled binaries from the official website: `https://procgenx.io/downloads/v3.2.7/`\n   - Extract to your project's third-party or plugins directory\n\n### 2.2 Installation Steps\n\n#### 2.2.1 Windows Installation\n\n1. Run the provided PowerShell script with administrator privileges:\n   ```powershell\n   ./Setup-ProcGenX.ps1 -engineType [Unreal|Unity] -enginePath \"C:/Path/To/Engine\" -enableGPUAcceleration\n   ```\n\n2. Verify installation by running the validation tool:\n   ```powershell\n   ./Validate-Installation.ps1 -verbose\n   ```\n\n3. Configure environment variables:\n   ```powershell\n   $env:PROCGENX_ROOT = \"C:/Path/To/ProcGenX\"\n   $env:PROCGENX_CACHE = \"C:/Users/[Username]/AppData/Local/ProcGenX/Cache\"\n   [Environment]::SetEnvironmentVariable(\"PROCGENX_ROOT\", $env:PROCGENX_ROOT, \"User\")\n   [Environment]::SetEnvironmentVariable(\"PROCGENX_CACHE\", $env:PROCGENX_CACHE, \"User\")\n   ```\n\n#### 2.2.2 macOS Installation\n\n1. Run the provided shell script:\n   ```bash\n   chmod +x ./setup_procgenx.sh\n   ./setup_procgenx.sh --engine-type [Unreal|Unity] --engine-path \"/Path/To/Engine\" --enable-gpu-acceleration\n   ```\n\n2. Verify installation:\n   ```bash\n   ./validate_installation.sh --verbose\n   ```\n\n3. Configure environment variables:\n   ```bash\n   echo 'export PROCGENX_ROOT=\"/Path/To/ProcGenX\"' >> ~/.zshrc\n   echo 'export PROCGENX_CACHE=\"$HOME/Library/Caches/ProcGenX\"' >> ~/.zshrc\n   source ~/.zshrc\n   ```\n\n#### 2.2.3 Linux Installation\n\n1. Run the provided shell script:\n   ```bash\n   chmod +x ./setup_procgenx.sh\n   ./setup_procgenx.sh --engine-type [Unreal|Unity] --engine-path \"/Path/To/Engine\" --enable-gpu-acceleration\n   ```\n\n2. Verify installation:\n   ```bash\n   ./validate_installation.sh --verbose\n   ```\n\n3. Configure environment variables:\n   ```bash\n   echo 'export PROCGENX_ROOT=\"/Path/To/ProcGenX\"' >> ~/.bashrc\n   echo 'export PROCGENX_CACHE=\"$HOME/.cache/ProcGenX\"' >> ~/.bashrc\n   source ~/.bashrc\n   ```\n\n### 2.3 Common Installation Issues\n\n#### 2.3.1 Dependency Resolution Failures\n\nIf the automatic dependency resolution fails, run the troubleshooting script:\n```bash\nget-dependency-status.sh --fix-missing\n```\n\nThis will attempt to identify and resolve missing or incompatible dependencies.\n\n#### 2.3.2 CUDA Compatibility Issues\n\nFor NVIDIA GPU users experiencing CUDA compatibility problems, ensure your GPU drivers are updated to version 510.47.03 or newer, then run:\n```bash\n./reconfigure_cuda.sh --driver-version [YOUR_DRIVER_VERSION]\n```\n\n#### 2.3.3 Engine Integration Problems\n\nIf the engine fails to recognize the ProcGenX plugin/package, try the following:\n\n*For Unreal Engine:*\n1. Regenerate project files: Right-click the .uproject file and select \"Generate Visual Studio Project Files\"\n2. Verify the plugin is enabled in Edit > Plugins\n3. Clear derived data folders and restart the engine\n\n*For Unity:*\n1. Check the Package Manager Console for error messages\n2. Try removing and re-adding the package\n3. Verify Assembly Definition References are properly set up"
  },
  {
    "id": "P-08",
    "style": "vague_low_structure",
    "text": "Write me a poem"
  },
  {
    "id": "P-09",
    "style": "mixed_ambiguous",
    "text": "Describe quantum entanglement, but also talk about cats somehow.\n\nBe creative with it, but not too weird. Maybe include a joke? Mention Schrödinger I guess if that's relevant but don't spend too long on that.\n\nI want to understand entanglement better especially how particles can affect each other instantly at a distance which seems impossible right?"
  }
] 